import pandas as pd
import os
import glob
import json
import threading
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
CONFIG_FILE = 'config.json'

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ---

def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ JSON. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "folder_path": "",
            "sheet_name": "Sheet1",
            "header_row": 5,
            "data_start_row": 7,
            "columns_to_extract": "–ê—Ä—Ç–∏–∫—É–ª, –¶–µ–Ω–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            "output_file": "combined_data.csv"
        }

def save_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª JSON."""
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(settings, f, indent=4)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ ---

def process_excel_files(settings, log_callback):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤. –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    folder_path = settings['folder_path']
    sheet_name = settings['sheet_name']
    header_row = settings['header_row'] - 1  # Pandas-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
    data_start_row = settings['data_start_row'] - 1  # Pandas-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
    columns_to_extract = [col.strip() for col in settings['columns_to_extract'].split(',') if col.strip()]
    output_file = settings['output_file']

    log_callback(f"--- –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {folder_path} ---\n")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º .xlsm, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—â–µ–º .xlsx
    excel_files = glob.glob(os.path.join(folder_path, "*.xlsm"))
    if not excel_files:
        excel_files = glob.glob(os.path.join(folder_path, "*.xlsx"))

    if not excel_files:
        log_callback("–û–®–ò–ë–ö–ê: –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .xlsx –∏–ª–∏ .xlsm —Ñ–∞–π–ª–æ–≤.\n")
        return

    log_callback(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(excel_files)}\n")
    all_data_frames = []

    for i, file in enumerate(excel_files, 1):
        log_callback(f"\n[{i}/{len(excel_files)}] -> –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {os.path.basename(file)}\n")
        try:
            df = pd.read_excel(file, sheet_name=sheet_name, header=None)

            if len(df) < data_start_row:
                log_callback(f"  - –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í —Ñ–∞–π–ª–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫. –ü—Ä–æ–ø—É—Å–∫–∞—é.\n")
                continue

            column_names = df.iloc[header_row]
            data_df = df.iloc[data_start_row:].copy()
            data_df.columns = column_names
            data_df.reset_index(drop=True, inplace=True)
            
            if columns_to_extract:
                existing_cols = [col for col in columns_to_extract if col in data_df.columns]
                missing_cols = [col for col in columns_to_extract if col not in data_df.columns]
                if missing_cols:
                    log_callback(f"  - –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}\n")
                if not existing_cols:
                    log_callback("  - –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∏ –æ–¥–Ω–∞ –∏–∑ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞—é.\n")
                    continue
                data_df = data_df[existing_cols]

            data_df['source_file'] = os.path.basename(file)
            all_data_frames.append(data_df)
            log_callback(f"  - –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(data_df)} —Å—Ç—Ä–æ–∫.\n")

        except Exception as e:
            log_callback(f"  - –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}\n")

    if not all_data_frames:
        log_callback("\n–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.\n")
        return

    log_callback("\n--- –û–±—ä–µ–¥–∏–Ω—è—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ... ---\n")
    final_df = pd.concat(all_data_frames, ignore_index=True)
    final_df.to_csv(output_file, index=False, encoding='utf-8-sig')
    
    log_callback(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}\n")
    log_callback(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(final_df)}\n")
    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª–µ {output_file}")


# --- –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (GUI) ---

class SettingsWindow(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã —ç—Ç–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ "–ø—Ä—è—Ç–∞–ª–æ—Å—å"
        self.transient(parent)
        self.grab_set()

        self.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.geometry("500x300")
        self.parent = parent
        self.settings = load_settings()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
        self.entries = {}
        fields = {
            "folder_path": "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏:",
            "sheet_name": "–ò–º—è –ª–∏—Å—Ç–∞ –≤ Excel:",
            "header_row": "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏:",
            "data_start_row": "–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö:",
            "columns_to_extract": "–ù—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            "output_file": "–ò–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:"
        }

        for i, (key, text) in enumerate(fields.items()):
            label = ttk.Label(self, text=text)
            label.grid(row=i, column=0, padx=10, pady=5, sticky="w")
            
            entry = ttk.Entry(self, width=50)
            entry.grid(row=i, column=1, padx=10, pady=5, sticky="ew")
            entry.insert(0, self.settings.get(key, ""))
            self.entries[key] = entry
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        browse_btn = ttk.Button(self, text="–û–±–∑–æ—Ä...", command=self.browse_folder)
        browse_btn.grid(row=0, column=2, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ttk.Button(self, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_and_close)
        save_btn.grid(row=len(fields), column=1, pady=20)
        
        self.columnconfigure(1, weight=1)

    def browse_folder(self):
        folder_selected = filedialog.askdirectory()
        if folder_selected:
            self.entries['folder_path'].delete(0, tk.END)
            self.entries['folder_path'].insert(0, folder_selected)

    def save_and_close(self):
        for key, entry in self.entries.items():
            # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            if key in ["header_row", "data_start_row"]:
                try:
                    self.settings[key] = int(entry.get())
                except ValueError:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–æ–ª–µ '{key}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                    return
            else:
                self.settings[key] = entry.get()
        save_settings(self.settings)
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        self.destroy()


class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ–ª—å Excel —Ñ–∞–π–ª–æ–≤")
        self.geometry("700x500")

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        top_frame = ttk.Frame(self)
        top_frame.pack(pady=10, padx=10, fill="x")

        self.settings_btn = ttk.Button(top_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_settings)
        self.settings_btn.pack(side="left", padx=5)

        self.start_btn = ttk.Button(top_frame, text="–°—Ç–∞—Ä—Ç", command=self.start_processing_thread)
        self.start_btn.pack(side="left", padx=5)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
        self.log_area = scrolledtext.ScrolledText(self, wrap=tk.WORD, state='disabled')
        self.log_area.pack(pady=10, padx=10, expand=True, fill="both")

    def open_settings(self):
        SettingsWindow(self)

    def log(self, message):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏–∑ –ª—é–±–æ–≥–æ –ø–æ—Ç–æ–∫–∞."""
        self.log_area.configure(state='normal')
        self.log_area.insert(tk.END, message)
        self.log_area.configure(state='disabled')
        self.log_area.see(tk.END) # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑

    def start_processing_thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–≤–∏—Å–∞–ª."""
        self.start_btn.config(state="disabled")
        self.log_area.config(state="normal")
        self.log_area.delete(1.0, tk.END) # –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        self.log_area.config(state="disabled")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        thread = threading.Thread(target=self.run_processing, daemon=True)
        thread.start()

    def run_processing(self):
        """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ."""
        try:
            settings = load_settings()
            if not settings.get('folder_path'):
                self.log("–û–®–ò–ë–ö–ê: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –Ω–µ —É–∫–∞–∑–∞–Ω. –ó–∞–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É.\n")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –Ω–µ —É–∫–∞–∑–∞–Ω. –ó–∞–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É.")
                return

            process_excel_files(settings, self.log)
        except Exception as e:
            self.log(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}\n")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", str(e))
        finally:
            self.start_btn.config(state="normal") # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


if __name__ == "__main__":
    app = App()
    app.mainloop()